name: mac-13 CMake llvm17 flang java parallel mpich

on:
  workflow_dispatch:
  push:
    branches: [ main- ]

jobs:
  build:
    strategy:
      matrix:
        name: ["macOS Latest Clang"]
        include:
          - name: "macOS Latest Clang"
            artifact: "macOS.tar.xz"
            os: macos-13
            build_type: "Release"
            cpp: OFF
            fortran: ON
            java: ON
            ts: OFF
            hl: ON
            parallel: ON
            toolchain: "config/toolchain/clang.cmake"
            generator: "-G Ninja"

    name: ${{ matrix.name }}
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, 'skip-ci')"

    steps:
    - name: Install Dependencies (macOS)
      run: brew install llvm mpich ninja # carlocab/personal/flang
    - name: Install flang
      run : |
        git clone --single-branch --branch llvmorg-17.0.1 \
          https://github.com/llvm/llvm-project.git
        mkdir build
        mkdir install
        ROOTDIR=`pwd`
        INSTALLDIR=$ROOTDIR/install
        echo $INSTALLDIR
        cd build
        cmake \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=$INSTALLDIR \
          -DCMAKE_CXX_STANDARD=17 \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
          -DCMAKE_CXX_LINK_FLAGS="-Wl,-rpath,$LD_LIBRARY_PATH" \
          -DFLANG_ENABLE_WERROR=ON \
          -DLLVM_ENABLE_ASSERTIONS=ON \
          -DLLVM_TARGETS_TO_BUILD=host \
          -DLLVM_LIT_ARGS=-v \
          -DLLVM_ENABLE_PROJECTS="clang;mlir;flang;openmp" \
          -DLLVM_ENABLE_RUNTIMES="compiler-rt" \
          ../llvm-project/llvm
        ninja install

    - name: Configure
      run: |
        pwd
        ls
        export LV=${{ runner.workspace }}/actions/install
        ls $LV
        export PATH="$LV/bin:/usr/local/opt/llvm/bin:$PATH"
        export LDFLAGS="-L$LV/lib"
        export CPPFLAGS="-I$LV/include"
        export CFLAGS="-I$LV/include"
        which flang-new
        export FC="$(which flang-new)"
        export CC="$(which clang)"
        echo $CC
        echo $FC
        git clone https://github.com/HDFGroup/hdf5.git
        cd hdf5
        mkdir build
        cd build
        cmake ${{ matrix.generator }} \
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
        -DCMAKE_TOOLCHAIN_FILE=${{ matrix.toolchain }} \
        -DBUILD_SHARED_LIBS:BOOL=ON \
        -DBUILD_STATIC_EXECS:BOOL=OFF \
        -DBUILD_STATIC_LIBS:BOOL=OFF \
        -DHDF5_ENABLE_ALL_WARNINGS=ON \
        -DHDF5_ENABLE_THREADSAFE:BOOL=${{ matrix.ts }} \
        -DHDF5_BUILD_HL_LIB:BOOL=${{ matrix.hl }} \
        -DHDF5_ENABLE_PARALLEL:BOOL=${{ matrix.parallel }} \
        -DHDF5_BUILD_CPP_LIB:BOOL=${{ matrix.cpp }} \
        -DHDF5_BUILD_FORTRAN=${{ matrix.fortran }} \
        -DHDF5_BUILD_JAVA=${{ matrix.java }} \
        -DHDF5_ENABLE_SUBFILING_VFD:BOOL=ON \
        -DHDF5_ENABLE_SZIP_SUPPORT:BOOL=OFF \
        -DMPIEXEC_MAX_NUMPROCS:STRING=2 \
        ..
        make -j
      shell: bash

    - name: Build
      run: cmake --build . --config ${{ matrix.build_type }}
      working-directory: ${{ runner.workspace }}/build

    - name: Test
      run: ctest --build . -C ${{ matrix.build_type }} -V
      working-directory: ${{ runner.workspace }}/build

    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: my-artifact
        path: ${{ runner.workspace }}/build/CMakeCache.txt
