name: WSL Kali Linux Setup and Update

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  kali-linux-setup:
    runs-on: windows-2025
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Enable WSL feature
      run: |
        Write-Host "Enabling WSL feature..."
        dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
        dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
      shell: pwsh

    - name: Install Kali Linux using WSL
      run: |
        Write-Host "Setting WSL version to 2..."
        wsl --set-default-version 2

        Write-Host "Checking available online distributions..."
        wsl -l -o

        Write-Host "Installing Kali Linux directly using WSL..."
        # Install Kali Linux using the official WSL method
        wsl --install -d kali-linux --no-launch

        Write-Host "Waiting for Kali Linux installation to complete..."
        Start-Sleep -Seconds 30

        Write-Host "Verifying Kali Linux installation..."
        wsl --list --verbose

        # Find the Kali distribution name
        $wslOutput = wsl --list --quiet
        $kaliDistroName = $null

        Write-Host "Available distributions:"
        foreach ($line in $wslOutput) {
          $cleanLine = $line.Trim() -replace '\0', ''
          Write-Host "  - '$cleanLine'"
          if ($cleanLine -match "kali|Kali") {
            $kaliDistroName = $cleanLine
            Write-Host "Found Kali distribution: '$kaliDistroName'"
          }
        }

        if (-not $kaliDistroName) {
          Write-Host "Kali not found, checking for exact name 'kali-linux'..."
          if ((wsl --list --quiet | ForEach-Object { $_.Trim() -replace '\0', '' }) -contains "kali-linux") {
            $kaliDistroName = "kali-linux"
            Write-Host "Found kali-linux distribution"
          }
        }

        if ($kaliDistroName) {
          Write-Host "Setting '$kaliDistroName' as default distribution..."
          wsl --set-default $kaliDistroName

          # Set environment variable for subsequent steps
          Add-Content $env:GITHUB_ENV "KALI_DISTRO_NAME=$kaliDistroName"
          Write-Host "Kali distribution name set to: $kaliDistroName"
        } else {
          Write-Host "ERROR: Kali Linux installation failed!"
          Write-Host "Available distributions:"
          wsl --list --verbose
          exit 1
        }
      shell: pwsh

    - name: Initialize Kali Linux and install essential packages
      run: |
        Write-Host "Using Kali distribution: $env:KALI_DISTRO_NAME"
        Write-Host "Verifying Kali Linux is available..."
        wsl --list --verbose

        Write-Host "Testing Kali Linux connection..."
        # Test if we can connect to the distribution
        $maxAttempts = 5
        $attempt = 1
        $success = $false

        while ($attempt -le $maxAttempts -and -not $success) {
          Write-Host "Attempt $attempt of $maxAttempts to connect to $env:KALI_DISTRO_NAME..."
          try {
            $result = wsl -d $env:KALI_DISTRO_NAME -- echo "Kali Linux connection successful" 2>&1
            if ($LASTEXITCODE -eq 0) {
              $success = $true
              Write-Host "Successfully connected to $env:KALI_DISTRO_NAME!"
              Write-Host "Connection result: $result"
            } else {
              throw "WSL command failed with exit code $LASTEXITCODE"
            }
          } catch {
            Write-Host "Connection failed: $_"
            Write-Host "Waiting 10 seconds before retry..."
            Start-Sleep -Seconds 10
            $attempt++
          }
        }

        if (-not $success) {
          Write-Host "Failed to connect to $env:KALI_DISTRO_NAME after $maxAttempts attempts"
          Write-Host "Current WSL distributions:"
          wsl --list --verbose
          exit 1
        }

        Write-Host "Updating package lists..."
        wsl -d $env:KALI_DISTRO_NAME -- bash -c "apt update"

        Write-Host "Installing essential packages..."
        wsl -d $env:KALI_DISTRO_NAME -- bash -c "apt install -y gnupg curl wget git vim"
      shell: pwsh

    - name: Configure Kali Linux repositories and update system
      run: |
        # Create the bash script with proper line endings
        $bashScript = @"
        set -e

        echo '=== Configuring Latest Kali Linux ==='

        # Display initial system information
        echo '=== Initial System Information ==='
        cat /etc/os-release
        uname -a
        echo ''

        # Configure latest Kali repositories
        echo '=== Configuring Latest Kali Repositories ==='
        sudo tee /etc/apt/sources.list > /dev/null <<EOF
        # Kali Linux rolling release - latest packages
        deb http://http.kali.org/kali kali-rolling main contrib non-free non-free-firmware
        deb-src http://http.kali.org/kali kali-rolling main contrib non-free non-free-firmware
        EOF

        # Add Kali GPG key (apt-key is deprecated, use gpg directly)
        wget -q -O - https://archive.kali.org/archive-key.asc | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/kali-archive.gpg

        # Update package lists
        echo '=== Updating Package Lists ==='
        sudo apt update

        # Configure dpkg to avoid interactive prompts
        echo '=== Configuring Package Management ==='
        sudo dpkg --configure -a

        # Fix any broken packages
        echo '=== Fixing Broken Packages ==='
        sudo apt --fix-broken install -y

        # Clean package cache
        sudo apt clean
        sudo apt autoclean

        # Configure debconf for non-interactive mode
        echo 'debconf debconf/frontend select Noninteractive' | sudo debconf-set-selections

        # Handle problematic packages first
        echo '=== Handling Problematic Packages ==='
        sudo DEBIAN_FRONTEND=noninteractive apt-mark hold libc6 || true

        # Full system upgrade to latest packages with retries
        echo '=== Upgrading to Latest System Packages ==='
        for i in {1..3}; do
          echo "Upgrade attempt \$i/3..."
          if sudo DEBIAN_FRONTEND=noninteractive apt full-upgrade -y -o Dpkg::Options::='--force-confdef' -o Dpkg::Options::='--force-confold' -o Dpkg::Options::='--force-overwrite'; then
            echo "Upgrade successful on attempt \$i"
            break
          else
            echo "Upgrade failed on attempt \$i, retrying..."
            sudo dpkg --configure -a
            sudo apt --fix-broken install -y
            sleep 5
          fi
        done

        # Unhold packages after upgrade
        sudo apt-mark unhold libc6 || true
"@

        # Execute the script with proper line endings
        wsl -d $env:KALI_DISTRO_NAME -- bash -c $bashScript
      shell: pwsh

    - name: Create non-root user
      run: |
        wsl -d $env:KALI_DISTRO_NAME -- bash -c '
        echo "=== Creating Non-Root User ==="
        
        # Create kali user with sudo privileges
        sudo useradd -m -s /bin/bash kaliuser
        echo 'kaliuser:kalipass' | sudo chpasswd
        sudo usermod -aG sudo kaliuser
        
        # Configure passwordless sudo for convenience in CI
        echo 'kaliuser ALL=(ALL) NOPASSWD:ALL' | sudo tee /etc/sudoers.d/kaliuser
        
        # Verify user creation
        echo "User created successfully:"
        sudo cat /etc/passwd | grep kaliuser
        '
      shell: pwsh

    - name: Install latest Kali meta-packages
      run: |
        wsl -d $env:KALI_DISTRO_NAME -- bash -c '
        echo "=== Installing Latest Kali Meta-Packages ==="
        
        # Install core Kali packages
        sudo DEBIAN_FRONTEND=noninteractive apt install -y \
          kali-tools-top10 \
          kali-linux-headless \
          kali-tools-web \
          kali-tools-database \
          kali-tools-passwords \
          kali-tools-wireless \
          kali-tools-reverse-engineering \
          kali-tools-exploitation \
          kali-tools-social-engineering \
          kali-tools-sniffing-spoofing \
          kali-tools-post-exploitation \
          kali-tools-forensics
        '
      shell: pwsh

    - name: Install essential penetration testing tools
      run: |
        wsl -d $env:KALI_DISTRO_NAME -- bash -c '
        echo "=== Installing Essential Penetration Testing Tools ==="
        
        sudo DEBIAN_FRONTEND=noninteractive apt install -y \
          nmap \
          masscan \
          rustscan \
          netcat-traditional \
          socat \
          john \
          hashcat \
          hydra \
          gobuster \
          ffuf \
          dirbuster \
          nikto \
          sqlmap \
          burpsuite \
          metasploit-framework \
          armitage \
          set \
          beef-xss \
          wireshark \
          tcpdump \
          aircrack-ng \
          recon-ng \
          theharvester \
          maltego \
          autopsy \
          binwalk \
          foremost \
          volatility3 \
          steghide \
          exiftool \
          strings \
          hexedit
        '
      shell: pwsh

    - name: Install modern security tools
      run: |
        wsl -d $env:KALI_DISTRO_NAME -- bash -c '
        echo "=== Installing Modern Security Tools ==="
        
        # Install Go for building tools
        sudo apt install -y golang-go
        
        # Set up Go environment
        export GOPATH=/opt/go
        export PATH=$PATH:/opt/go/bin
        sudo mkdir -p /opt/go/bin
        
        # Install popular Go-based security tools
        echo "Installing nuclei..."
        go install -v github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest
        
        echo "Installing subfinder..."
        go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
        
        echo "Installing httpx..."
        go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest
        
        echo "Installing naabu..."
        go install -v github.com/projectdiscovery/naabu/v2/cmd/naabu@latest
        
        echo "Installing katana..."
        go install github.com/projectdiscovery/katana/cmd/katana@latest
        
        echo "Installing waybackurls..."
        go install github.com/tomnomnom/waybackurls@latest
        
        echo "Installing assetfinder..."
        go install github.com/tomnomnom/assetfinder@latest
        
        echo "Installing gau..."
        go install github.com/lc/gau/v2/cmd/gau@latest
        
        # Copy Go tools to system path
        sudo cp /opt/go/bin/* /usr/local/bin/ 2>/dev/null || true
        
        # Update Python packages
        echo "=== Updating Python Security Packages ==="
        python3 -m pip install --upgrade pip setuptools wheel
        pip3 install --user \
          requests \
          beautifulsoup4 \
          scapy \
          pwntools \
          impacket \
          bloodhound \
          crackmapexec \
          responder \
          mitm6 \
          sqlparse \
          paramiko \
          cryptography
        '
      shell: pwsh

    - name: Configure security databases and services
      run: |
        wsl -d $env:KALI_DISTRO_NAME -- bash -c '
        echo "=== Configuring Security Databases and Services ==="
        
        # Configure PostgreSQL for Metasploit
        echo "Setting up Metasploit database..."
        sudo systemctl enable postgresql || true
        sudo service postgresql start || true
        
        # Initialize Metasploit database
        sudo msfdb init || echo "Metasploit database initialization skipped"
        
        # Update Nmap script database
        echo "Updating Nmap script database..."
        sudo nmap --script-updatedb
        
        # Update Nuclei templates
        echo "Updating Nuclei templates..."
        nuclei -update-templates -silent || echo "Nuclei templates update skipped"
        
        # Create wordlist directory and download common wordlists
        echo "Setting up wordlists..."
        sudo mkdir -p /usr/share/wordlists
        
        # Download SecLists if not present
        if [ ! -d "/usr/share/wordlists/SecLists" ]; then
          sudo git clone https://github.com/danielmiessler/SecLists.git /usr/share/wordlists/SecLists
        fi
        '
      shell: pwsh

    - name: Verify Kali Linux installation and tools
      run: |
        wsl -d $env:KALI_DISTRO_NAME -- bash -c '
        echo "=== Verifying Kali Linux Installation ==="
        
        # System information
        echo "=== System Information ==="
        echo "Kali Version:"
        cat /etc/os-release | grep -E 'PRETTY_NAME|VERSION'
        echo ""
        echo "Kernel Version:"
        uname -r
        echo ""
        echo "Architecture:"
        uname -m
        echo ""
        
        # Check installed packages
        echo "=== Package Statistics ==="
        echo "Total packages installed: $(dpkg -l | wc -l)"
        echo "Kali-specific packages: $(apt list --installed 2>/dev/null | grep -i kali | wc -l)"
        echo ""
        
        # Verify essential tools
        echo "=== Essential Tools Verification ==="
        tools=(nmap sqlmap john hashcat nikto gobuster burpsuite metasploit wireshark nuclei subfinder httpx)
        for tool in "${tools[@]}"; do
          if command -v $tool >/dev/null 2>&1; then
            version=$(command -v $tool 2>/dev/null)
            echo "✓ $tool: $version"
          else
            echo "✗ $tool: not found"
          fi
        done
        echo ""
        
        # Check Go tools
        echo "=== Go-based Tools Verification ==="
        go_tools=(nuclei subfinder httpx naabu katana waybackurls assetfinder gau)
        for tool in "${go_tools[@]}"; do
          if command -v $tool >/dev/null 2>&1; then
            echo "✓ $tool: $(which $tool)"
          else
            echo "✗ $tool: not found"
          fi
        done
        echo ""
        
        # System resources
        echo "=== System Resources ==="
        echo "Memory usage:"
        free -h
        echo ""
        echo "Disk usage:"
        df -h / /tmp
        echo ""
        
        # Network configuration
        echo "=== Network Configuration ==="
        ip addr show | grep -E '(inet |inet6)' | head -5
        echo ""
        
        # Services status
        echo "=== Services Status ==="
        echo "PostgreSQL status:"
        sudo service postgresql status || echo "PostgreSQL not running"
        echo ""
        '
      shell: pwsh

    - name: Final system cleanup and optimization
      run: |
        wsl -d $env:KALI_DISTRO_NAME -- bash -c '
        echo "=== Final System Cleanup and Optimization ==="
        
        # Clean up packages
        sudo apt autoremove -y
        sudo apt autoclean
        sudo apt clean
        
        # Update locate database
        sudo updatedb || echo "updatedb not available"
        
        # Set proper permissions
        sudo chown -R kaliuser:kaliuser /home/kaliuser
        
        # Create useful aliases for kaliuser
        sudo -u kaliuser tee /home/kaliuser/.bashrc >> /dev/null <<EOF
        # Kali Linux aliases
        alias ll='ls -alF'
        alias la='ls -A'
        alias l='ls -CF'
        alias ..='cd ..'
        alias ...='cd ../..'
        alias grep='grep --color=auto'
        alias nmap='nmap --reason'
        alias ports='netstat -tulanp'
        
        # Security tool shortcuts
        alias scan='nmap -sS -O -v'
        alias webscan='nikto -h'
        alias dirscan='gobuster dir -u'
        
        # Set Go path
        export GOPATH=/opt/go
        export PATH=\$PATH:/opt/go/bin
        EOF
        
        echo "=== Kali Linux setup completed successfully! ==="
        echo "Summary:"
        echo "- Latest Kali Linux rolling release installed"
        echo "- Essential penetration testing tools configured"
        echo "- Modern Go-based security tools installed"
        echo "- Security databases updated"
        echo "- User 'kaliuser' created with sudo privileges"
        echo "- System optimized and ready for security testing"
        '
      shell: pwsh

    - name: Run security tools test
      run: |
        wsl -d $env:KALI_DISTRO_NAME -- bash -c '
        echo "=== Security Tools Functionality Test ==="
        
        # Test basic tools
        echo "Testing Nmap..."
        nmap --version | head -2
        
        echo "Testing Nuclei..."
        nuclei -version || echo "Nuclei version check failed"
        
        echo "Testing SQLMap..."
        sqlmap --version | head -1
        
        echo "Testing John the Ripper..."
        john --test=0 2>/dev/null | head -3 || echo "John test completed"
        
        echo "Testing Gobuster..."
        gobuster version
        
        echo "Testing Subfinder..."
        subfinder -version || echo "Subfinder version check completed"
        
        echo "Testing HTTPx..."
        httpx -version || echo "HTTPx version check completed"
        
        echo "=== All tools tested successfully! ==="
        '
      shell: pwsh
